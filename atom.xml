<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lzrain Blog</title>
  
  <subtitle>雨天的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lzrain.com/"/>
  <updated>2018-02-23T03:15:54.789Z</updated>
  <id>http://lzrain.com/</id>
  
  <author>
    <name>liuzhenrain</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows 执行 Junction 解决C盘无空间的问题</title>
    <link href="http://lzrain.com/2017/09/windows-junction.html"/>
    <id>http://lzrain.com/2017/09/windows-junction.html</id>
    <published>2017-09-04T02:48:45.000Z</published>
    <updated>2018-02-23T03:15:54.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很多情况下，我们的C盘都会因为长时间的使用导致C盘空间越来越小，这个时候默认的操作使用各种工具执行垃圾清理，但是实际效果并不好很多的文件并不能被清理掉，尤其是软件目录下的文件。这个时候 Junction就派上用场了。在不改变目录结构的情况将C盘中的文件内容移动到其他的盘。<br><a id="more"></a></p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>Junction 利用了 NTFS 盘的特性制作一个文件夹硬链接，执行完 Junction 操作后，你在C盘看到的其实是一个类似于镜像的东西，虽然有文件存在，但实际存储位置不在C盘。当然，如果你所使用的硬盘格式为 FAT32 那就肯定是使用不了这个功能只能另寻他法了。</p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><ol><li><p>命令</p> <figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">junction c:\Program Files\xxxxx d:\xxxxx</span><br></pre></td></tr></table></figure></li><li><p>释义</p><ul><li>c:\Program Files\xxxxx 软连接目录，在执行 junction 操作之前，这个目录实际是不存在的。</li><li>d:\xxxx 这个是实际存在的目录，所有的文件内容都在这个目录里面。</li></ul></li></ol><h2 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h2><ol><li>进入到 Windows 安全模式，最小启动模式。</li><li>将你需要移动的文件夹进行拷贝其他目录位置</li><li>删除原始文件夹。</li><li>执行 Junction 命令</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;很多情况下，我们的C盘都会因为长时间的使用导致C盘空间越来越小，这个时候默认的操作使用各种工具执行垃圾清理，但是实际效果并不好很多的文件并不能被清理掉，尤其是软件目录下的文件。这个时候 Junction就派上用场了。在不改变目录结构的情况将C盘中的文件内容移动到其他的盘。&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="http://lzrain.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="windows" scheme="http://lzrain.com/tags/windows/"/>
    
      <category term="junction" scheme="http://lzrain.com/tags/junction/"/>
    
  </entry>
  
  <entry>
    <title>Excel 常用快捷键整理</title>
    <link href="http://lzrain.com/2017/06/excel-quickkey.html"/>
    <id>http://lzrain.com/2017/06/excel-quickkey.html</id>
    <published>2017-06-17T14:38:21.000Z</published>
    <updated>2018-02-23T03:15:54.788Z</updated>
    
    <content type="html"><![CDATA[<ol><li><code>Ctrl+Shift+L</code> 打开筛选</li><li><code>Alt+下箭头</code> 快速获取筛选选项</li><li><code>Shift+Space</code> 选择整行</li><li><code>Ctrl+Space</code> 选择整列</li><li><code>Alt+H,H</code> 快速填充颜色</li><li><code>End,箭头键</code> 进入结束模式，进入“结束”模式，移到与活动单元格相同列或行中的下一个非空单元格，然后关闭“结束”模式。如果单元格为空，则移到行或列中的最后一个单元格。</li><li>数组公式，使用数组求和，需要 <code>=SUM((MOD(ROW(H3:H202)-3,5)=0)*H3:H202)</code>[从H3开始，每隔5行进行求和] 需要使用<code>ctrl+shift+enter</code>结束，得到的公式结果为<code>{=SUM((MOD(ROW(H3:H202)-3,5)=0)*H3:H202)}</code> ，但是需要注意的是，进行编辑之后，每次都需要使用<code>ctrl+shift+enter</code>结束。</li><li>数组公式使用并不是很方便，可以使用<code>=SUMPRODUCT((MOD(ROW(H3:H202),5)=3)*(H3:H202))</code>代替上面的公式</li></ol><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;code&gt;Ctrl+Shift+L&lt;/code&gt; 打开筛选&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt+下箭头&lt;/code&gt; 快速获取筛选选项&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shift+Space&lt;/code&gt; 选择整行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl+Space&lt;/code&gt; 选择整列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt+H,H&lt;/code&gt; 快速填充颜色&lt;/li&gt;
&lt;li&gt;&lt;code&gt;End,箭头键&lt;/code&gt; 进入结束模式，进入“结束”模式，移到与活动单元格相同列或行中的下一个非空单元格，然后关闭“结束”模式。如果单元格为空，则移到行或列中的最后一个单元格。&lt;/li&gt;
&lt;li&gt;数组公式，使用数组求和，需要 &lt;code&gt;=SUM((MOD(ROW(H3:H202)-3,5)=0)*H3:H202)&lt;/code&gt;[从H3开始，每隔5行进行求和] 需要使用&lt;code&gt;ctrl+shift+enter&lt;/code&gt;结束，得到的公式结果为&lt;code&gt;{=SUM((MOD(ROW(H3:H202)-3,5)=0)*H3:H202)}&lt;/code&gt; ，但是需要注意的是，进行编辑之后，每次都需要使用&lt;code&gt;ctrl+shift+enter&lt;/code&gt;结束。&lt;/li&gt;
&lt;li&gt;数组公式使用并不是很方便，可以使用&lt;code&gt;=SUMPRODUCT((MOD(ROW(H3:H202),5)=3)*(H3:H202))&lt;/code&gt;代替上面的公式&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="整理" scheme="http://lzrain.com/categories/%E6%95%B4%E7%90%86/"/>
    
    
      <category term="excel" scheme="http://lzrain.com/tags/excel/"/>
    
  </entry>
  
  <entry>
    <title>Windows 下WSL使用CRONTAB自动更新SVN</title>
    <link href="http://lzrain.com/2017/06/svn-auto-update.html"/>
    <id>http://lzrain.com/2017/06/svn-auto-update.html</id>
    <published>2017-06-17T03:09:37.000Z</published>
    <updated>2018-02-23T03:15:54.788Z</updated>
    
    <content type="html"><![CDATA[<p>项目的关系，每次都要更新好几个文件夹比较麻烦，而且刚好已经安装好了WSL（ Windows Subsystem for Linux ）因此开始折腾起了自动更新的工作，使用的是crontab服务。此文介绍如何在WSL中配置crontab服务以及遇到的一些问题。<br><a id="more"></a></p><h1 id="安装以及配置"><a href="#安装以及配置" class="headerlink" title="安装以及配置"></a>安装以及配置</h1><ol><li><p>检查是否已经安装了svn，如果没有安装，使用 <code>sudo apt install subversion</code>进行安装，无需关注版本问题。</p></li><li><p>检查cron服务是否开启，<code>service cron status</code>，如果未开启，使用<code>service cron start</code> 如果出现权限问题，前面加上<code>sudo</code></p></li><li><p>编写自动更新脚本，可以参照一下脚本。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">export</span> LANG=zh_CN.UTF8</span><br><span class="line"><span class="comment"># 以下所有路径，建议写完整路径</span></span><br><span class="line"><span class="built_in">echo</span> `date` &gt;&gt; /home/lzrain/autoupdate.log</span><br><span class="line">WorkingPath=/mnt/h/S3Project</span><br><span class="line">w_client=<span class="variable">$WorkingPath</span>/client</span><br><span class="line">w_data=<span class="variable">$WorkingPath</span>/data</span><br><span class="line">w_design=<span class="variable">$WorkingPath</span>/design</span><br><span class="line">w_publish=<span class="variable">$WorkingPath</span>/publish</span><br><span class="line"></span><br><span class="line"><span class="comment"># echo ".......update $w_client......."</span></span><br><span class="line"><span class="comment"># svn up $w_client</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">".......update <span class="variable">$w_data</span>........."</span></span><br><span class="line">svn up <span class="variable">$w_data</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">".......update <span class="variable">$w_design</span> ........."</span></span><br><span class="line">svn up <span class="variable">$w_design</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">".......update <span class="variable">$w_publish</span> ........."</span></span><br><span class="line">svn up <span class="variable">$w_publish</span></span><br><span class="line"><span class="comment"># 写完保存，在终端中使用一下命令改变权限，使其成为可执行文件</span></span><br><span class="line">chmod +x /mnt/z/autoupdate.sh <span class="comment"># 需要将文件路径改为你所保存的文件路径</span></span><br></pre></td></tr></table></figure></li><li><p>使用<code>locale -a</code>检查当前系统语言包是否有zh_CN.UTF8，如果没有，则需要进行安装，不然SVN会出现错误。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用一下语句安装语言环境</span></span><br><span class="line">sudo apt install language-pack-zh-hans-base</span><br><span class="line">locale -a</span><br><span class="line"><span class="comment"># 如果看到zh_CN.utf8证明安装成功</span></span><br></pre></td></tr></table></figure></li><li><p>使用crontab配置cron自动脚本</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo crontab -u username -e</span><br><span class="line"><span class="comment"># 在最后一行填写以下代码</span></span><br><span class="line">*/5 8-22 * * * /mnt/z/autoupdate.sh &gt;&gt; /home/lzrain/autoupdate.log 2&gt;&amp;1</span><br><span class="line"><span class="comment"># */5 每隔5分钟执行</span></span><br><span class="line"><span class="comment"># 8-22 每天8点到22点执行</span></span><br><span class="line"><span class="comment"># 2&gt;&amp;1 重定向错误输出到标准输出，也就是将所有信息都写到 /home/lzrain/autoupdate.log 文件中</span></span><br></pre></td></tr></table></figure></li><li><p>确定检查没有错误之后，建议将 crontab 进行修改，加入自动删除Log文件的逻辑，防止log文件太大.</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 完整的crontab配置如下</span></span><br><span class="line"><span class="comment"># 每天8-22点每隔15分钟执行更新操作，最好根据自己的更新频率进行调整</span></span><br><span class="line">*/15 8-22 * * * /mnt/z/autoupdate.sh &gt;&gt; /home/lzrain/autoupdate.log 2&gt;&amp;1</span><br><span class="line">* 23 * * * <span class="built_in">echo</span> <span class="string">""</span> &gt; /home/lzrain/autoupdate.log  <span class="comment"># 每天23点将autoupdate.log的内容置为"";</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><ol><li><p>出现 <code>svn:E000022: Error converting entry in directory</code> 错误，请参照上面的步骤 4 安装 zh_CN.UTF8 语言环境</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类似错误打印信息如下</span></span><br><span class="line">svn: E000022: Error converting entry <span class="keyword">in</span> directory <span class="string">'*****'</span> to UTF-8</span><br><span class="line">svn: E000022: Can<span class="string">'t convert string from native encoding to '</span>UTF-8<span class="string">':</span></span><br><span class="line"><span class="string">svn: E000022: A_&#123;U+58F0&#125;&#123;U+97f0&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>若出现<code>svn: warning: cannot set LC_CTYPE locale</code> 错误，同样参照之前步骤4安装 zh_CN.UTF8 语言环境即可解决。</p></li><li><p>若已经安装了zh_CN.UTF8语言环境，还是出现UTF8编码问题，请检查脚本中是否加入了 <code>export LANG=zh_CN.UTF8</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目的关系，每次都要更新好几个文件夹比较麻烦，而且刚好已经安装好了WSL（ Windows Subsystem for Linux ）因此开始折腾起了自动更新的工作，使用的是crontab服务。此文介绍如何在WSL中配置crontab服务以及遇到的一些问题。&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="http://lzrain.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="crontab" scheme="http://lzrain.com/tags/crontab/"/>
    
      <category term="wsl" scheme="http://lzrain.com/tags/wsl/"/>
    
      <category term="svn" scheme="http://lzrain.com/tags/svn/"/>
    
  </entry>
  
  <entry>
    <title>VIM 快捷键等整理</title>
    <link href="http://lzrain.com/2017/06/vim.html"/>
    <id>http://lzrain.com/2017/06/vim.html</id>
    <published>2017-06-07T06:43:42.000Z</published>
    <updated>2018-02-23T03:15:54.788Z</updated>
    
    <content type="html"><![CDATA[<p>此文中所有的内容均来自于个人网络内容整理，主要还是平时用到了，然后记录下来方便忘记了之后能快速看到</p><h1 id="复制、粘贴"><a href="#复制、粘贴" class="headerlink" title="复制、粘贴"></a>复制、粘贴</h1><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><ol><li>单行复制<blockquote><p>在命令模式下，将光标移动到需要复制的行首，输入”yy”进行复制</p></blockquote></li><li>多行复制<blockquote><p>在命令模式下，将光标移动到需要复制的首行行首，输入”nyy”进行多行复制</p></blockquote></li></ol><h2 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴"></a>粘贴</h2><p>命令模式下，将光标移动到需要粘贴的位置，输入”p”进行粘贴</p><h1 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h1><a id="more"></a><h2 id="多行复制"><a href="#多行复制" class="headerlink" title="多行复制"></a>多行复制</h2><ol><li>在命令行模式下输入 <code>2,6 co 12</code>，将第2行到第六行的数据复制到第12行</li><li><p>不需要知道具体的行数，按如下命令输入</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在命令模式下</span><br><span class="line">将光标移动到首行，输入 ma</span><br><span class="line">将光标移动到末行，输入 mb</span><br><span class="line">将光标移动到需要粘贴的行，输入 mc</span><br><span class="line">输入 :<span class="string">'a,'</span>b co <span class="string">'c (包括冒号)</span></span><br></pre></td></tr></table></figure><blockquote><p>如果把 <code>co</code> 换成 <code>m</code> 即为剪切<br>删除更简单， :’a,’b de (包括冒号)</p></blockquote></li></ol><h2 id="复制单词"><a href="#复制单词" class="headerlink" title="复制单词"></a>复制单词</h2><p>在命令模式下，将光标移动到需要复制的单词首字符，输入 <code>yw</code>，粘贴同样输入<code>p</code></p><h2 id="复制几个字母或字符"><a href="#复制几个字母或字符" class="headerlink" title="复制几个字母或字符"></a>复制几个字母或字符</h2><p>在命令模式下，将光标移动到需要复制的字符下，输入<code>yl</code> 或者 <code>5yl</code> ，即可复制1个或者5个字符。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此文中所有的内容均来自于个人网络内容整理，主要还是平时用到了，然后记录下来方便忘记了之后能快速看到&lt;/p&gt;
&lt;h1 id=&quot;复制、粘贴&quot;&gt;&lt;a href=&quot;#复制、粘贴&quot; class=&quot;headerlink&quot; title=&quot;复制、粘贴&quot;&gt;&lt;/a&gt;复制、粘贴&lt;/h1&gt;&lt;h2 id=&quot;复制&quot;&gt;&lt;a href=&quot;#复制&quot; class=&quot;headerlink&quot; title=&quot;复制&quot;&gt;&lt;/a&gt;复制&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;单行复制&lt;blockquote&gt;
&lt;p&gt;在命令模式下，将光标移动到需要复制的行首，输入”yy”进行复制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;多行复制&lt;blockquote&gt;
&lt;p&gt;在命令模式下，将光标移动到需要复制的首行行首，输入”nyy”进行多行复制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;粘贴&quot;&gt;&lt;a href=&quot;#粘贴&quot; class=&quot;headerlink&quot; title=&quot;粘贴&quot;&gt;&lt;/a&gt;粘贴&lt;/h2&gt;&lt;p&gt;命令模式下，将光标移动到需要粘贴的位置，输入”p”进行粘贴&lt;/p&gt;
&lt;h1 id=&quot;高级用法&quot;&gt;&lt;a href=&quot;#高级用法&quot; class=&quot;headerlink&quot; title=&quot;高级用法&quot;&gt;&lt;/a&gt;高级用法&lt;/h1&gt;
    
    </summary>
    
      <category term="整理" scheme="http://lzrain.com/categories/%E6%95%B4%E7%90%86/"/>
    
    
      <category term="VIM" scheme="http://lzrain.com/tags/VIM/"/>
    
  </entry>
  
  <entry>
    <title>C#正则表达式详解</title>
    <link href="http://lzrain.com/2017/05/c-regex.html"/>
    <id>http://lzrain.com/2017/05/c-regex.html</id>
    <published>2017-05-24T09:35:34.000Z</published>
    <updated>2018-02-23T03:15:54.787Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式整理<br><a id="more"></a></p><p>只能输入数字：<code>&quot;^[0-9]*$&quot;</code>。<br>只能输入n位的数字：<code>&quot;^\d{n}$&quot;</code>。<br>只能输入至少n位的数字：<code>&quot;^\d{n,}$&quot;</code>。<br>只能输入m~n位的数字：<code>&quot;^\d{m,n}$&quot;</code><br>只能输入零和非零开头的数字：”^(0|[1-9][0-9]<em>)$”。<br>只能输入有两位小数的正实数：”^[0-9]+(.[0-9]{2})?$”。<br>只能输入有1~3位小数的正实数：”^[0-9]+(.[0-9]{1,3})?$”。<br>只能输入非零的正整数：”^+?[1-9][0-9]</em>$”。<br>只能输入非零的负整数：”^-[1-9][]0-9”<em>$。<br>只能输入长度为3的字符：”^.{3}$”。<br>只能输入由26个英文字母组成的字符串：”^[A-Za-z]+$”。<br>只能输入由26个大写英文字母组成的字符串：”^[A-Z]+$”。<br>只能输入由26个小写英文字母组成的字符串：”^[a-z]+$”。<br>只能输入由数字和26个英文字母组成的字符串：”^[A-Za-z0-9]+$”。<br>只能输入由数字、26个英文字母或者下划线组成的字符串：”^\w+$”。<br>验证用户密码：”^[a-zA-Z]\w{5,17}$”正确格式为：以字母开头，长度在6~18之间，只能包含字符、数字和下划线。<br>验证是否含有^%&amp;’,;=?$\”等字符：”[^%&amp;’,;=?$\x22]+”。<br>只能输入汉字：”^[\u4e00-\u9fa5]{0,}$”<br>验证Email地址：”^\w+([-+.]\w+)</em>@\w+([-.]\w+)<em>.\w+([-.]\w+)</em>$”。<br>验证InternetURL：”^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]<em>)?$”。<br>验证电话号码：”^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$”正确格式为：”XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX”。<br>验证身份证号(15位或18位数字)：”^\d{15}|\d{18}$”。<br>验证一年的12个月：”^(0?[1-9]|1[0-2])$”正确格式为：”01”～”09”和”1”～”12”。<br>验证一个月的31天：”^((0?[1-9])|((1|2)[0-9])|30|31)$”正确格式为;”01”～”09”和”1”～”31”。<br>利用正则表达式限制网页表单里的文本框输入内容：<br>用正则表达式限制只能输入中文：onkeyup=”value=value.replace(/[^\u4E00-\u9FA5]/g,’’)” onbeforepaste=”clipboardData.setData(’text’,clipboardData.getData(’text’).replace(/[^\u4E00-\u9FA5]/g,’’))”<br>用正则表达式限制只能输入全角字符： onkeyup=”value=value.replace(/[^\uFF00-\uFFFF]/g,’’)” onbeforepaste=”clipboardData.setData(’text’,clipboardData.getData(’text’).replace(/[^\uFF00-\uFFFF]/g,’’))”<br>用正则表达式限制只能输入数字：onkeyup=”value=value.replace(/[^\d]/g,’’) “onbeforepaste=”clipboardData.setData(’text’,clipboardData.getData(’text’).replace(/[^\d]/g,’’))”<br>用正则表达式限制只能输入数字和英文：onkeyup=”value=value.replace(/[\W]/g,’’) “onbeforepaste=”clipboardData.setData(’text’,clipboardData.getData(’text’).replace(/[^\d]/g,’’))”<br>得用正则表达式从URL地址中提取文件名的javascript程序，如下结果为page1<br>s=<a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a>  s=s.replace(/(.</em>\/){0,}([^.]+).<em>/ig,”$2”)  alert(s)<br>匹配双字节字符(包括汉字在内)：[^\x00-\xff]<br>应用：计算字符串的长度(一个双字节字符长度计2，ASCII字符计1)<br>String.prototype.len=function(){return this.replace([^\x00-\xff]/g,”aa”).length;}<br>匹配空行的正则表达式：\n[\s| ]</em>\r<br>匹配HTML标记的正则表达式：/&lt;(.<em>)&gt;.</em>&lt;\/\1&gt;|&lt;(.<em>) \/&gt;/<br>匹配首尾空格的正则表达式：(^\s</em>)|(\s<em>$)<br>String.prototype.trim = function()  　<br>　{  　<br>　return this.replace(/(^\s</em>)|(\s*$)/g, “”);  　<br>　}<br>利用正则表达式分解和转换IP地址：</p><p>下面是利用正则表达式匹配IP地址，并将IP地址转换成对应数值的Javascript程序：<br>复制代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IP2V</span>(<span class="params">ip</span>)  　</span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    re=<span class="regexp">/(\d+)\.(\d+)\.(\d+)\.(\d+)/g</span> <span class="comment">//匹配IP地址的正则表达式  if(re.test(ip))  　</span></span><br><span class="line">　   &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">RegExp</span>.$<span class="number">1</span>*<span class="built_in">Math</span>.pow(<span class="number">255</span>,<span class="number">3</span>))+<span class="built_in">RegExp</span>.$<span class="number">2</span>*<span class="built_in">Math</span>.pow(<span class="number">255</span>,<span class="number">2</span>))+<span class="built_in">RegExp</span>.$<span class="number">3</span>*<span class="number">255</span>+<span class="built_in">RegExp</span>.$<span class="number">4</span>*<span class="number">1</span>  　</span><br><span class="line">　   &#125;  　</span><br><span class="line">　   <span class="keyword">else</span>  　</span><br><span class="line">　   &#123;  </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Not a valid IP address!"</span>) </span><br><span class="line">    &#125;  　</span><br><span class="line">　&#125;</span><br></pre></td></tr></table></figure></p><p>复制代码<br>不过上面的程序如果不用正则表达式，而直接用split函数来分解可能更简单，程序如下：</p><p>var ip=”10.100.20.168”  ip=ip.split(“.”)  　<br>alert(“IP值是：”+(ip[0]<em>255</em>255<em>255+ip[1]</em>255<em>255+ip[2]</em>255+ip[3]*1))<br>符号解释：</p><p>\</p><p>将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ’\’ 匹配 “\” 而 “(“ 则匹配 “(“。</p><p>^</p><p>匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ’\n’ 或 ’\r’ 之后的位置。</p><p>$</p><p>匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ’\n’ 或 ’\r’ 之前的位置。</p><p>*</p><p>匹配前面的子表达式零次或多次。例如，zo<em> 能匹配 “z” 以及 “zoo”。</em> 等价于{0,}。</p><p>+</p><p>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</p><p>?</p><p>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 中的”do” 。? 等价于 {0,1}。</p><p>{n}</p><p>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ’o’，但是能匹配 “food” 中的两个 o。</p><p>{n,}</p><p>n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ’o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ’o+’。’o{0,}’ 则等价于 ’o*’。</p><p>{n,m}</p><p>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ’o?’。请注意在逗号和两个数之间不能有空格。</p><p>?</p><p>当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ’o+’ 将匹配所有 ’o’。</p><p>.</p><p>匹配除 “\n” 之外的任何单个字符。要匹配包括 ’\n’ 在内的任何字符，请使用象 ’[.\n]’ 的模式。</p><p>(pattern)</p><p>匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ’(’ 或 ’)’。</p><p>(?:pattern)</p><p>匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (|) 来组合一个模式的各个部分是很有用。例如， ’industr(?:y|ies) 就是一个比 ’industry|industries’ 更简略的表达式。</p><p>(?=pattern)</p><p>正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，’Windows (?=95|98|NT|2000)’ 能匹配 “Windows 2000” 中的 “Windows” ，但不能匹配 “Windows 3.1” 中的 “Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</p><p>(?!pattern)</p><p>负向预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如’Windows (?!95|98|NT|2000)’ 能匹配 “Windows 3.1” 中的 “Windows”，但不能匹配 “Windows 2000” 中的 “Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始</p><p>x|y</p><p>匹配 x 或 y。例如，’z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。</p><p>[xyz]</p><p>字符集合。匹配所包含的任意一个字符。例如， ’[abc]’ 可以匹配 “plain” 中的 ’a’。</p><p>[^xyz]</p><p>负值字符集合。匹配未包含的任意字符。例如， ’[^abc]’ 可以匹配 “plain” 中的’p’。</p><p>[a-z]</p><p>字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ’a’ 到 ’z’ 范围内的任意小写字母字符。</p><p>[^a-z]</p><p>负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ’a’ 到 ’z’ 范围内的任意字符。</p><p>\b</p><p>匹配一个单词边界，也就是指单词和空格间的位置。例如， ’er\b’ 可以匹配”never” 中的 ’er’，但不能匹配 “verb” 中的 ’er’。</p><p>\B</p><p>匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ’er’，但不能匹配 “never” 中的 ’er’。</p><p>　   \cx</p><p>匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ’c’ 字符。</p><p>\d</p><p>匹配一个数字字符。等价于 [0-9]。</p><p>\D</p><p>匹配一个非数字字符。等价于 [^0-9]。</p><p>\f</p><p>匹配一个换页符。等价于 \x0c 和 \cL。</p><p>\n</p><p>匹配一个换行符。等价于 \x0a 和 \cJ。</p><p>\r</p><p>匹配一个回车符。等价于 \x0d 和 \cM。</p><p>\s</p><p>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</p><p>\S</p><p>匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</p><p>\t</p><p>匹配一个制表符。等价于 \x09 和 \cI。</p><p>\v</p><p>匹配一个垂直制表符。等价于 \x0b 和 \cK。</p><p>\w</p><p>匹配包括下划线的任何单词字符。等价于’[A-Za-z0-9_]’。</p><p>\W</p><p>匹配任何非单词字符。等价于 ’[^A-Za-z0-9_]’。</p><p>\xn</p><p>匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\x41’ 匹配 “A”。’\x041’ 则等价于 ’\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。.</p><p>\num</p><p>匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符。</p><p>\n</p><p>标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</p><p>\nm</p><p>标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</p><p>\nml</p><p>如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</p><p>\un</p><p>匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正则表达式整理&lt;br&gt;
    
    </summary>
    
      <category term="采集" scheme="http://lzrain.com/categories/%E9%87%87%E9%9B%86/"/>
    
    
      <category term="C#" scheme="http://lzrain.com/tags/C/"/>
    
      <category term="正则" scheme="http://lzrain.com/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>Mac+Apache 实时预览 Hexo 博客</title>
    <link href="http://lzrain.com/2017/05/mac-apache-hexo.html"/>
    <id>http://lzrain.com/2017/05/mac-apache-hexo.html</id>
    <published>2017-05-21T18:35:27.000Z</published>
    <updated>2018-02-23T03:15:54.787Z</updated>
    
    <content type="html"><![CDATA[<div class="note warning"><p>本文所有的过程只能在 Mac 下才能使用，Linux 暂时没跑过还不知道，配合 <code>hexo generate --watch</code> 食用简直不要太舒服。</p></div><p>折腾了 HEXO 博客折腾了好几天，因为我是用的 vscode 来撰写博客，vscode 自带又自动保存功能，在开启了 hexo s 之后，使用{% note warning %}类似的标签功能的时候会报错，以及我自己在新增 Bootstrap 的效果，会编译错误，然后我需要不停的 clean 我的博客来查看我修改的代码在编译之后是否能通过，然后就越来越烦躁了每次都要 hexo clean; hexo g;hexo s;的命令查看最新的修改结果，就想到了能不能自己弄个服务器来来跑 public 文件夹中的最新内容（因为每次编译之后一定会生成一个 public 文件夹，其实也就是你的网站内容）。然后我就查到了在 Mac 电脑里默认就有安装好了 Apache 服务器，而且还是默认开机启动的。然后又开始折腾了。以下就我折腾出的总结步骤。</p><a id="more"></a><p>修改内容：</p><ol><li>修改自动化脚本 2017-06-01 <a href="#加入插件-Shelljs">点击查看</a></li></ol><h1 id="折腾开始"><a href="#折腾开始" class="headerlink" title="折腾开始"></a>折腾开始</h1><p>打开 <code>etc/apache2</code> 文件夹 <code>open /etc/apache2</code> 并跳转到该文件夹<code>cd /etc/apache2</code></p><h2 id="配置-httpd-conf"><a href="#配置-httpd-conf" class="headerlink" title="配置 httpd.conf"></a>配置 httpd.conf</h2><ol><li>使用你喜欢的编辑器打开 <code>httpd.conf</code></li><li>找到 <code>Include /private/etc/apache2/extra/httpd-vhosts.conf</code></li><li>新建一行内容：<code>Include /private/etc/apache2/extra/vhost-hexo.conf</code>，将文件另存到桌面</li><li>备份 httpd.conf，并将刚才编辑的 conf 文件替换原始文件 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 确保你已经在 /etc/apache2 目录下</span></span><br><span class="line">sudo cp httpd.conf httpd.conf.bak</span><br><span class="line">sudo cp ~/Desktop/httpd.conf httpd.conf</span><br></pre></td></tr></table></figure></li></ol><h2 id="配置-vhost-hexo-conf"><a href="#配置-vhost-hexo-conf" class="headerlink" title="配置 vhost-hexo.conf"></a>配置 vhost-hexo.conf</h2><ol><li>新建一个文件名字为 vhost-hexo.conf</li><li><p>复制以下代码至文件并保存</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    DocumentRoot &quot;/Library/WebServer/Documents&quot;</span><br><span class="line">    ServerName localhost</span><br><span class="line">    ErrorLog &quot;/private/var/log/apache2/localhost-error_log&quot;</span><br><span class="line">    CustomLog &quot;/private/var/log/apache2/localhost-access_log&quot; common</span><br><span class="line">&lt;/VirtualHost&gt; </span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    DocumentRoot &quot;/Users/&#123;你的 mac 用户名&#125;&#125;/Documents/MyWorkSpace/HexoBlog/public/&quot;</span><br><span class="line">    ServerName hexoblog</span><br><span class="line">    ErrorLog &quot;/private/var/log/apache2/hexoblog-error_log&quot;</span><br><span class="line">    CustomLog &quot;/private/var/log/apache2/hexoblog-access_log&quot; common</span><br><span class="line">    &lt;Directory &quot;/Users/&#123;你的 mac 用户名&#125;&#125;/Documents/MyWorkSpace/HexoBlog/public/&quot;&gt;</span><br><span class="line">                Options Indexes FollowSymLinks MultiViews</span><br><span class="line">                AllowOverride All</span><br><span class="line">                Require all granted</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></li><li><p>拷贝到 <code>/etc/apache2/extra/</code> 目录下，如果没有权限执行以下代码</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp ~/Desktop/vhost-hexo.conf extra/vhost-hexo.conf</span><br></pre></td></tr></table></figure></li></ol><h2 id="修改-host-文件"><a href="#修改-host-文件" class="headerlink" title="修改 host 文件"></a>修改 host 文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/host</span><br><span class="line"><span class="comment"># 添加一行</span></span><br><span class="line">127.0.0.1 hexoblog</span><br></pre></td></tr></table></figure><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><ol><li><p>重启 Apache</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apachectl restart</span><br></pre></td></tr></table></figure></li><li><p>打开浏览器输入 <a href="http://hexoblog" target="_blank" rel="noopener">http://hexoblog</a> 即可畅快浏览了，前提是你的 public 文件存在，如果不存在就先编译一下咯。</p></li></ol><p><strong>然后，你就会遇到一个非常，非常，非常操蛋的问题了，没有权限。哈哈哈哈哈。。我就在这里折腾了好久好久。不停的修改配置文件，结果，非常简单，因为你的 public 目录 Apache 没有访问权限。</strong></p><h2 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h2><ol><li>参照<code>vhost-hexo.conf</code>中配置的目录，一级一级的查看目录权限，使用<code>ls -l path</code>的方式，如果看到对应的目录的权限最后一个没有<code>x</code>，使用<code>chmod o+x folderpath</code>的方式加入权限。</li><li>执行<code>chmod -R o+x {public目录路径}</code> 你可以选择直接将 public 目录直接拖到终端里面，路径自己就出来了</li><li>重启 Apache 就能看到效果了。</li></ol><h1 id="自动化修改权限"><a href="#自动化修改权限" class="headerlink" title="自动化修改权限"></a>自动化修改权限</h1><p>以上部分执行完能够在当次正常浏览网站，但是如果你是用了 <code>hexo clean</code> 之后 public 目录的权限又会出现问题所以需要加入 hexo 的插件来自动化解决。</p><h2 id="加入插件-Shelljs"><a href="#加入插件-Shelljs" class="headerlink" title="加入插件 Shelljs"></a>加入插件 Shelljs</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &#123;Hexo 博客根目录&#125;</span><br><span class="line">npm install --save shelljs</span><br></pre></td></tr></table></figure><p>在你的博客根目录建立<code>scripts</code>目录，并加入一个 autochmod.js 文件，将如下代码贴入 js 文件中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'shelljs/global'</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> action = <span class="string">"none"</span>;</span><br><span class="line">hexo.on(<span class="string">'generateBefore'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">action = <span class="string">"generate"</span>;</span><br><span class="line">&#125;);</span><br><span class="line">hexo.on(<span class="string">"exit"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(action === <span class="string">"generate"</span>)&#123;</span><br><span class="line">chmodX();</span><br><span class="line">action = <span class="string">"none"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"出现错误! 详情："</span> + e.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chmodX</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (which(<span class="string">'cmd'</span>)) &#123;</span><br><span class="line">action = <span class="string">"none"</span>;</span><br><span class="line">echo(<span class="string">" In Windows."</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(exec(<span class="string">"chmod -R o+x public/"</span>).code !== <span class="number">0</span>)&#123;</span><br><span class="line">echo(<span class="string">"chmod error"</span>);</span><br><span class="line">exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">echo(<span class="string">"=========== Change public Complete =============="</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>至此就可以执行完 <code>hexo g</code> 立即就能看到效果了。</strong></p><div class="alert alert-danger"><i class="fa fa-bug fa-lg">&nbsp;&nbsp;<strong>重要提示</strong></i> <p>如果你使用过<code>hexo clean</code>请先使用 <code>hexo g</code>编译一次，然后再使用<code>hexo generate --watch</code>来监测文件变动，否则会出现 apache 服务503错误。</p></div><h1 id="更简单的方案"><a href="#更简单的方案" class="headerlink" title="更简单的方案"></a>更简单的方案</h1><ol><li>关闭 Markdown编辑器的自动保存功能</li><li>hexo clean</li><li>hexo g</li><li>hexo s</li></ol><blockquote><p>直到写完文章，保存，hexo服务器会自动刷新内容。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note warning&quot;&gt;&lt;p&gt;本文所有的过程只能在 Mac 下才能使用，Linux 暂时没跑过还不知道，配合 &lt;code&gt;hexo generate --watch&lt;/code&gt; 食用简直不要太舒服。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;折腾了 HEXO 博客折腾了好几天，因为我是用的 vscode 来撰写博客，vscode 自带又自动保存功能，在开启了 hexo s 之后，使用{% note warning %}类似的标签功能的时候会报错，以及我自己在新增 Bootstrap 的效果，会编译错误，然后我需要不停的 clean 我的博客来查看我修改的代码在编译之后是否能通过，然后就越来越烦躁了每次都要 hexo clean; hexo g;hexo s;的命令查看最新的修改结果，就想到了能不能自己弄个服务器来来跑 public 文件夹中的最新内容（因为每次编译之后一定会生成一个 public 文件夹，其实也就是你的网站内容）。然后我就查到了在 Mac 电脑里默认就有安装好了 Apache 服务器，而且还是默认开机启动的。然后又开始折腾了。以下就我折腾出的总结步骤。&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://lzrain.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Mac" scheme="http://lzrain.com/tags/Mac/"/>
    
      <category term="Apache" scheme="http://lzrain.com/tags/Apache/"/>
    
      <category term="Hexo" scheme="http://lzrain.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客完全版教程</title>
    <link href="http://lzrain.com/2017/05/hexoblog.html"/>
    <id>http://lzrain.com/2017/05/hexoblog.html</id>
    <published>2017-05-09T10:28:59.000Z</published>
    <updated>2017-05-19T02:10:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>人生就是不停的折腾，不是正在折腾就是走在折腾的路上</p></blockquote><p>这篇教程来自于我的折腾，完成此篇所有的操作，能够实现 Coding.net ,Github.com 同时同步，并且将博客所有的源文件自动备份到 git.oschina.net 的项目中，当然你可以选择将所有的文件全部同步到同一个git库中。通过 Dnspod 实现国内外流量分流，国内流量分流到 pages.coding.net，国外流量分流到 github.com。加入了 qiniu.com 的图片插件，节省库容量，毕竟最多只能提过1G的容量，而且能够显著的提高图片的加载速度。</p><div class="note warning"><p>提醒：这篇文章走下来，国内用户访问会出现一个问题，每天第一次访问，会有coding.net的一个展示界面，这个没办法，我没有给coding.net钱，他们又是免费提供page服务。</p></div><a id="more"></a><h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><h2 id="写作工具"><a href="#写作工具" class="headerlink" title="写作工具"></a>写作工具</h2><p>推荐使用微软的 vscode 作为写作工具，这是一个自由度非常高，插件非常丰富，设置非常简单的跨平台文本编辑器，自带就有 Markdown 预览功能。</p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><ul><li>在windows下，<a href="https://pan.baidu.com/s/1misPT48" target="_blank" rel="noopener">下载Git</a></li><li>MAC，因为我自己有下载xcode所以不能确认Mac是否自带有Git</li></ul><h2 id="安装-Nodejs"><a href="#安装-Nodejs" class="headerlink" title="安装 Nodejs"></a>安装 Nodejs</h2><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p>NodeJs官方网站因为在国内你懂得<code>网络情况</code>，所以建议使用淘宝的源以及安装文件</p><p><a href="https://npm.taobao.org/mirrors/node/v7.9.0/node-v7.9.0-x64.msi" target="_blank" rel="noopener">下载地址-64位-WIN</a></p><p><a href="https://npm.taobao.org/mirrors/node/v7.9.0/node-v7.9.0-x86.msi" target="_blank" rel="noopener">下载地址-32位-WIN</a></p><p><a href="https://npm.taobao.org/mirrors/node/v7.9.0/node-v7.9.0.pkg" target="_blank" rel="noopener">下载地址-Mac</a></p><p>不建议安装在默认位置，最好选择非C盘路径,接下来的很多设置都和这个文件夹有问题，以及以后的 node_module 都会安装在这个文件夹下</p><h3 id="配置npm"><a href="#配置npm" class="headerlink" title="配置npm"></a>配置npm</h3><ol><li>确定安装目录，我的路径：<code>Z:\DEV\ENV\nodejs</code> （以后使用 <code>nodepath</code> 代替）</li><li>找到安装目录下的npmrc文件，我的路径是：<code>nodepath\node_modules\npm\npmrc</code></li><li><p>使用记事本打开 <code>npmrc</code>，加入以下配置</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">;这个是配置全局nodejs位置，安装好之后默认就是这里</span><br><span class="line">prefix=nodepath</span><br><span class="line">;用户配置文件,我自己新建了一个文件夹 NodejsEnv 用于保存个人 npmrc 配置</span><br><span class="line">userconfig=Z:\Dev\Env\NodejsEnv\.npmrc</span><br><span class="line">;这个不知道反正从c盘的我都移动了</span><br><span class="line">init-module=Z:\Dev\Env\NodejsEnv\.npm-init.js</span><br><span class="line">;设定Npm的源,默认的源在国内实在是太慢了</span><br><span class="line">registry=https://registry.npm.taobao.org/</span><br><span class="line">;设定npm的缓存,同样是为了将c盘中的文件移出来而已</span><br><span class="line">cache=Z:\Dev\Env\NOdejsEnv\Cache</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>npm config list</code> 查看配置是否和你配置的一致。 默认应该是显示如下</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">; cli configs</span><br><span class="line">scope = <span class="string">""</span></span><br><span class="line">user-agent = <span class="string">"npm/4.2.0 node/v7.9.0 win32 x64"</span></span><br><span class="line">; <span class="built_in">builtin</span> config undefined</span><br><span class="line">cache = <span class="string">"Z:\\Dev\\Env\\NodejsEnv\\Cache"</span></span><br><span class="line">init-module = <span class="string">"Z:\\Dev\\Env\\NodejsEnv\\.npm-init.js"</span></span><br><span class="line">prefix = <span class="string">"Z:\\Dev\\Env\\nodejs"</span></span><br><span class="line">registry = <span class="string">"https://registry.npm.taobao.org/"</span></span><br><span class="line">userconfig = <span class="string">"Z:\\Dev\\Env\\NodejsEnv\\.npmrc"</span></span><br></pre></td></tr></table></figure></li><li><p>默认在使用 msi 安装了 npm 之后会自动加入环境变量</p></li></ol><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>以下命令使用 <code>git bash</code> 客户端进行操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo version  // 可以检查hexo是否安装成功</span><br><span class="line">mkdir /z/Dev/Env/HexoBlog  // 以后使用 blogpath 代替</span><br><span class="line"><span class="built_in">cd</span> &#123;blogpath&#125;</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><blockquote><p>所有命令执行完，<a href="http://localhost:4000" target="_blank" rel="noopener">打开链接</a> 直接在浏览器上就能看到效果了。默认情况下，在不更改任何的<code>config.yml</code>文件，直接刷新网页就可以看到效果了。<br>如果出现端口问题，可以使用 hexo server -p <em>**</em>[端口号(1-65535)]</p></blockquote><h1 id="配置博客"><a href="#配置博客" class="headerlink" title="配置博客"></a>配置博客</h1><p>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p><h2 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h2><p>本站使用的是 Next.Mist 主题，下载方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &#123;blogpath&#125;</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br><span class="line"><span class="comment"># 下载完成之后删除 next 相关的 git 文件，方便备份。</span></span><br><span class="line">find themes/next -name <span class="string">".git"</span> | xargs rm -Rf</span><br></pre></td></tr></table></figure><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &#123;blogpath&#125;</span><br><span class="line">npm install --save hexo-deployer-git <span class="comment"># 提交git仓库需要的插件</span></span><br><span class="line">npm install --save hexo-generator-feed <span class="comment"># 自动生成rss订阅</span></span><br><span class="line">npm install --save hexo-generator-sitemap <span class="comment"># 自动生成网站sitemap,方便被搜索引擎检索</span></span><br><span class="line">npm install --save shelljs  <span class="comment">#用于自动备份博客项目</span></span><br></pre></td></tr></table></figure><p>请对比我的<code>{blogpath}/package.json</code>文件查看你缺少了那些，不用管版本号，缺少的使用上面的命令替换<code>--save</code>之后的就可以进行安装了</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"hexo-site"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"hexo"</span>: &#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"3.5.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"hexo"</span>: <span class="string">"^3.2.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-baidu-url-submit"</span>: <span class="string">"0.0.5"</span>,</span><br><span class="line">    <span class="attr">"hexo-deployer-git"</span>: <span class="string">"^0.3.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-deployer-heroku"</span>: <span class="string">"^0.1.1"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-archive"</span>: <span class="string">"^0.1.4"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-baidu-sitemap"</span>: <span class="string">"^0.1.2"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-category"</span>: <span class="string">"^0.1.3"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-feed"</span>: <span class="string">"^1.2.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-index"</span>: <span class="string">"^0.2.1"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-sitemap"</span>: <span class="string">"^1.1.2"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-tag"</span>: <span class="string">"^0.2.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-ejs"</span>: <span class="string">"^0.2.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-marked"</span>: <span class="string">"^0.2.10"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-stylus"</span>: <span class="string">"^0.3.1"</span>,</span><br><span class="line">    <span class="attr">"hexo-server"</span>: <span class="string">"^0.2.0"</span>,</span><br><span class="line">    <span class="attr">"shelljs"</span>: <span class="string">"^0.7.7"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>更加简单的安装插件的方式(2018年2月23日)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &#123;blogpath&#125;</span><br><span class="line">// 复制上面 dependencies 里面的所有数据，拷贝到本地Hexo博客目录的 package.json 文件中</span><br><span class="line">npm install</span><br><span class="line">// 完成，以后需要加新的插件，同样可以直接修改 dependencies 然后执行 上面的命令</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="Hexo-站点配置"><a href="#Hexo-站点配置" class="headerlink" title="Hexo 站点配置"></a>Hexo 站点配置</h2><p>站点配置主要在博客根目录的<code>_config.yml</code>文件中进行修改</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Lzrain</span> <span class="string">Blog</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">一切有为法，如梦幻泡影。如露亦如电，应作如是观。</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">liuzhenrain</span>  <span class="comment"># 作者名字</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span>   <span class="comment">#选择语言，zh-Hans为简体中文</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span>     <span class="comment"># 时区</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr"> - type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">   repo:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">coding.net</span> <span class="string">的git链接</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">github.com</span> <span class="string">库的git链接</span></span><br><span class="line"><span class="attr">   branch:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">   message:</span></span><br></pre></td></tr></table></figure><p>修改了 <code>theme</code> 主题设置，一定要重启hexo服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ctrl+c</span></span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></p><p>为了方便查看更改效果，建议参考我在 Mac 上的 Apache 配置，实现了在 hexo g 之后实时展示编译结果</p><p>其他命令</p><p>hexo clean</p><p>备份本地 HEXO 项目</p><ol><li>点击查看如何创建 git.oschina.net 账户</li><li>按照网站教程新建一个项目，比如项目名字为：HexoBlog</li><li>配置本地 HexoBlog</li></ol><blockquote><p>Next 主题地址：<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a></p></blockquote><p>Hexo 内链方式，效果：<a href="/2017/05/mac-apache-hexo.html" title="查看 Mac+Apache实时预览">查看 Mac+Apache实时预览</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link hello-world <span class="string">"查看 Hello World"</span> %&#125;</span><br></pre></td></tr></table></figure><p>关闭工作区自动保存功能</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;人生就是不停的折腾，不是正在折腾就是走在折腾的路上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这篇教程来自于我的折腾，完成此篇所有的操作，能够实现 Coding.net ,Github.com 同时同步，并且将博客所有的源文件自动备份到 git.oschina.net 的项目中，当然你可以选择将所有的文件全部同步到同一个git库中。通过 Dnspod 实现国内外流量分流，国内流量分流到 pages.coding.net，国外流量分流到 github.com。加入了 qiniu.com 的图片插件，节省库容量，毕竟最多只能提过1G的容量，而且能够显著的提高图片的加载速度。&lt;/p&gt;
&lt;div class=&quot;note warning&quot;&gt;&lt;p&gt;提醒：这篇文章走下来，国内用户访问会出现一个问题，每天第一次访问，会有coding.net的一个展示界面，这个没办法，我没有给coding.net钱，他们又是免费提供page服务。&lt;/p&gt;
&lt;/div&gt;
    
    </summary>
    
      <category term="教程" scheme="http://lzrain.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="http://lzrain.com/tags/Hexo/"/>
    
      <category term="Github" scheme="http://lzrain.com/tags/Github/"/>
    
      <category term="Coding.net" scheme="http://lzrain.com/tags/Coding-net/"/>
    
      <category term="git.oschina.net" scheme="http://lzrain.com/tags/git-oschina-net/"/>
    
  </entry>
  
</feed>
